// Generated by CoffeeScript 1.3.1
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Astrid = (function() {

    Astrid.name = 'Astrid';

    function Astrid(server, apikey, secret) {
      this.server = server;
      this.apikey = apikey;
      this.secret = secret;
      this.api = 7;
      this.user = null;
    }

    Astrid.prototype.setToken = function(token) {
      this.token = token;
    };

    Astrid.prototype.getToken = function() {
      return this.token;
    };

    Astrid.prototype.getUser = function() {
      return this.user;
    };

    Astrid.prototype.isSignedIn = function() {
      return this.token != null;
    };

    Astrid.prototype.signInAs = function(email, password, success, error) {
      var params, self;
      self = this;
      params = {
        email: email,
        provider: "password",
        secret: password
      };
      return this.sendRequest("user_signin", params, function(response) {
        if (response.status === "success") {
          self.token = response.token;
          self.user = response;
          if (success) {
            return success(response);
          }
        } else if (error) {
          return error(response.message);
        }
      });
    };

    Astrid.prototype.getLists = function(success, error) {
      var params;
      params = {};
      return this.sendRequest("tag_list", params, function(response) {
        if (response.status === "success") {
          if (success) {
            return success(response.list);
          }
        } else if (error) {
          return error(response.message);
        }
      });
    };

    Astrid.prototype.createTask = function(task, success, error) {
      var params;
      task.send_link = true;
      params = task;
      return this.sendRequest("task_save", params, function(response) {
        if (response.status === "success") {
          if (success) {
            return success(response);
          }
        } else if (error) {
          return error(response.message);
        }
      });
    };

    Astrid.prototype.addComment = function(comment, success, error) {
      var params;
      params = comment;
      return this.sendRequest("comment_add", params, function(response) {
        if (response.status === "success") {
          if (success) {
            return success(response);
          }
        } else if (error) {
          return error(response.message);
        }
      });
    };

    Astrid.prototype.constructRequest = function(method, params) {
      var item, key, keys, signature, value;
      params.app_id || (params.app_id = this.apikey);
      params.token || (params.token = this.token);
      params.time || (params.time = new Date().getTime() / 1000);
      keys = ((function() {
        var _results;
        _results = [];
        for (key in params) {
          _results.push(key);
        }
        return _results;
      })()).sort();
      signature = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          if (params[key] instanceof Array) {
            _results.push(key + "[]" + params[key].join(key + "[]"));
          } else {
            _results.push(key + params[key]);
          }
        }
        return _results;
      })();
      signature = method + signature.join("") + this.secret;
      params.sig = Astrid.md5(signature);
      for (key in params) {
        value = params[key];
        if (value instanceof Array) {
          params[key] = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              item = value[_i];
              _results.push(encodeURIComponent(item));
            }
            return _results;
          })();
        } else {
          params[key] = encodeURIComponent(value);
        }
      }
      return params;
    };

    Astrid.prototype.xhr = function() {
      if (typeof XMLHttpRequest !== "undefined") {
        return new XMLHttpRequest();
      } else {
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.6.0");
        } catch (_error) {}
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.3.0");
        } catch (_error) {}
        try {
          return new ActiveXObject("Microsoft.XMLHTTP");
        } catch (_error) {}
        throw new Error("This browser does not support XMLHttpRequest.");
      }
    };

    Astrid.prototype.sendRequest = function(method, params, callback) {
      var item, key, paramString, request, requestParams, url, value, _i, _len;
      url = this.server + "/api/" + this.api + "/" + method;
      request = new this.xhr();
      request.onreadystatechange = function() {
        var json, numbers, responseText;
        if (request.readyState === 4) {
          if (request.responseText === "") {
            return callback({
              status: "failure",
              message: "Empty response received from server."
            });
          } else {
            numbers = /("[^"]*":\s*)(\d{15,})([,}])/g;
            responseText = request.responseText.replace(numbers, "$1\"$2\"$3");
            json = Astrid.json_parse(responseText);
            return callback(json);
          }
        }
      };
      request.open("POST", url, true);
      request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      paramString = [];
      requestParams = this.constructRequest(method, params);
      for (key in requestParams) {
        value = requestParams[key];
        if (value instanceof Array) {
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            item = value[_i];
            paramString.push(key + "[]=" + item);
          }
        } else {
          paramString.push(key + "=" + value);
        }
      }
      return request.send(paramString.join("&"));
    };

    return Astrid;

  })();

  root.Astrid.json_parse = (function() {
    "use strict";

    var arr, at, ch, error, escapee, next, num, obj, str, text, value, white, word;
    at = void 0;
    ch = void 0;
    escapee = {
      "\"": "\"",
      "\\": "\\",
      "/": "/",
      b: "\b",
      f: "\f",
      n: "\n",
      r: "\r",
      t: "\t"
    };
    text = void 0;
    error = function(m) {
      throw {
        name: "SyntaxError"
      };
      return {
        message: m,
        at: at,
        text: text
      };
    };
    next = function(c) {
      if (c && c !== ch) {
        error("Expected '" + c + "' instead of '" + ch + "'");
      }
      ch = text.charAt(at);
      at += 1;
      return ch;
    };
    num = function() {
      var number, string;
      number = void 0;
      string = "";
      if (ch === "-") {
        string = "-";
        next("-");
      }
      while (ch >= "0" && ch <= "9") {
        string += ch;
        next();
      }
      if (ch === ".") {
        string += ".";
        while (next() && ch >= "0" && ch <= "9") {
          string += ch;
        }
      }
      if (ch === "e" || ch === "E") {
        string += ch;
        next();
        if (ch === "-" || ch === "+") {
          string += ch;
          next();
        }
        while (ch >= "0" && ch <= "9") {
          string += ch;
          next();
        }
      }
      number = +string;
      if (!isFinite(number)) {
        return error("Bad number");
      } else {
        return number;
      }
    };
    str = function() {
      var hex, i, string, uffff;
      hex = void 0;
      i = void 0;
      string = "";
      uffff = void 0;
      if (ch === "\"") {
        while (next()) {
          if (ch === "\"") {
            next();
            return string;
          } else if (ch === "\\") {
            next();
            if (ch === "u") {
              uffff = 0;
              i = 0;
              while (i < 4) {
                hex = parseInt(next(), 16);
                if (!isFinite(hex)) {
                  break;
                }
                uffff = uffff * 16 + hex;
                i += 1;
              }
              string += String.fromCharCode(uffff);
            } else if (typeof escapee[ch] === "string") {
              string += escapee[ch];
            } else {
              break;
            }
          } else {
            string += ch;
          }
        }
      }
      return error("Bad string");
    };
    white = function() {
      var _results;
      _results = [];
      while (ch && ch <= " ") {
        _results.push(next());
      }
      return _results;
    };
    word = function() {
      switch (ch) {
        case "t":
          next("t");
          next("r");
          next("u");
          next("e");
          return true;
        case "f":
          next("f");
          next("a");
          next("l");
          next("s");
          next("e");
          return false;
        case "n":
          next("n");
          next("u");
          next("l");
          next("l");
          return null;
      }
      return error("Unexpected '" + ch + "'");
    };
    value = void 0;
    arr = function() {
      var array;
      array = [];
      if (ch === "[") {
        next("[");
        white();
        if (ch === "]") {
          next("]");
          return array;
        }
        while (ch) {
          array.push(value());
          white();
          if (ch === "]") {
            next("]");
            return array;
          }
          next(",");
          white();
        }
      }
      return error("Bad array");
    };
    obj = function() {
      var key, object;
      key = void 0;
      object = {};
      if (ch === "{") {
        next("{");
        white();
        if (ch === "}") {
          next("}");
          return object;
        }
        while (ch) {
          key = str();
          white();
          next(":");
          if (Object.hasOwnProperty.call(object, key)) {
            error("Duplicate key \"" + key + "\"");
          }
          object[key] = value();
          white();
          if (ch === "}") {
            next("}");
            return object;
          }
          next(",");
          white();
        }
      }
      return error("Bad object");
    };
    value = function() {
      white();
      switch (ch) {
        case "{":
          return obj();
        case "[":
          return arr();
        case "\"":
          return str();
        case "-":
          return num();
        default:
          if (ch >= "0" && ch <= "9") {
            return num();
          } else {
            return word();
          }
      }
    };
    return function(source, reviver) {
      var result;
      result = void 0;
      text = source;
      at = 0;
      ch = " ";
      result = value();
      white();
      if (ch) {
        error("Syntax error");
      }
      return result;
    };
  })();

  (function($) {
    var binl2rstr, binl_md5, bit_rol, hex_hmac_md5, hex_md5, md5, md5_cmn, md5_ff, md5_gg, md5_hh, md5_ii, raw_hmac_md5, raw_md5, rstr2binl, rstr2hex, rstr_hmac_md5, rstr_md5, safe_add, str2rstr_utf8;
    safe_add = function(x, y) {
      var lsw, msw;
      lsw = (x & 0xFFFF) + (y & 0xFFFF);
      msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return (msw << 16) | (lsw & 0xFFFF);
    };
    bit_rol = function(num, cnt) {
      return (num << cnt) | (num >>> (32 - cnt));
    };
    md5_cmn = function(q, a, b, x, s, t) {
      return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
    };
    md5_ff = function(a, b, c, d, x, s, t) {
      return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    };
    md5_gg = function(a, b, c, d, x, s, t) {
      return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    };
    md5_hh = function(a, b, c, d, x, s, t) {
      return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    };
    md5_ii = function(a, b, c, d, x, s, t) {
      return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    };
    binl_md5 = function(x, len) {
      var a, b, c, d, i, olda, oldb, oldc, oldd;
      x[len >> 5] |= 0x80 << (len % 32);
      x[(((len + 64) >>> 9) << 4) + 14] = len;
      i = void 0;
      olda = void 0;
      oldb = void 0;
      oldc = void 0;
      oldd = void 0;
      a = 1732584193;
      b = -271733879;
      c = -1732584194;
      d = 271733878;
      i = 0;
      while (i < x.length) {
        olda = a;
        oldb = b;
        oldc = c;
        oldd = d;
        a = md5_ff(a, b, c, d, x[i], 7, -680876936);
        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5_gg(b, c, d, a, x[i], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5_hh(d, a, b, c, x[i], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5_ii(a, b, c, d, x[i], 6, -198630844);
        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
        i += 16;
      }
      return [a, b, c, d];
    };
    binl2rstr = function(input) {
      var i, output;
      i = void 0;
      output = "";
      i = 0;
      while (i < input.length * 32) {
        output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
        i += 8;
      }
      return output;
    };
    rstr2binl = function(input) {
      var i, output;
      i = void 0;
      output = [];
      output[(input.length >> 2) - 1] = undefined;
      i = 0;
      while (i < output.length) {
        output[i] = 0;
        i += 1;
      }
      i = 0;
      while (i < input.length * 8) {
        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
        i += 8;
      }
      return output;
    };
    rstr_md5 = function(s) {
      return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
    };
    rstr_hmac_md5 = function(key, data) {
      var bkey, hash, i, ipad, opad;
      i = void 0;
      bkey = rstr2binl(key);
      ipad = [];
      opad = [];
      hash = void 0;
      ipad[15] = opad[15] = undefined;
      if (bkey.length > 16) {
        bkey = binl_md5(bkey, key.length * 8);
      }
      i = 0;
      while (i < 16) {
        ipad[i] = bkey[i] ^ 0x36363636;
        opad[i] = bkey[i] ^ 0x5C5C5C5C;
        i += 1;
      }
      hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
      return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));
    };
    rstr2hex = function(input) {
      var hex_tab, i, output, x;
      hex_tab = "0123456789abcdef";
      output = "";
      x = void 0;
      i = void 0;
      i = 0;
      while (i < input.length) {
        x = input.charCodeAt(i);
        output += hex_tab.charAt((x >>> 4) & 0x0F) + hex_tab.charAt(x & 0x0F);
        i += 1;
      }
      return output;
    };
    str2rstr_utf8 = function(input) {
      return unescape(encodeURIComponent(input));
    };
    raw_md5 = function(s) {
      return rstr_md5(str2rstr_utf8(s));
    };
    hex_md5 = function(s) {
      return rstr2hex(raw_md5(s));
    };
    raw_hmac_md5 = function(k, d) {
      return rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d));
    };
    hex_hmac_md5 = function(k, d) {
      return rstr2hex(raw_hmac_md5(k, d));
    };
    md5 = function(string, key, raw) {
      if (!key) {
        if (!raw) {
          return hex_md5(string);
        } else {
          return raw_md5(string);
        }
      }
      if (!raw) {
        return hex_hmac_md5(key, string);
      } else {
        return raw_hmac_md5(key, string);
      }
    };
    return root.Astrid.md5 = md5;
  })(this);

}).call(this);
